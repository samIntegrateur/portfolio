//
// GRID
// Bootstrap inspired
//

// CONTAINERS
// ----------------------------------------------------------------------------
@mixin make-container() {
	width: 100%;
	margin-right: auto;
	margin-left: auto;

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint, $breakpoints: $grid-breakpoints) {
			$get-value: map-get($grid-gutter-widths, $breakpoint);
			padding: $get-value;
		}
	}
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

// GRID
// ----------------------------------------------------------------------------
@mixin make-row() {
	display: flex;
	flex-wrap: wrap;

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint, $breakpoints: $grid-breakpoints) {
			$get-value: map-get($grid-gutter-widths, $breakpoint);
			margin-right: ($get-value / -2);
			margin-left: ($get-value / -2);
			margin-top: ($get-value / -1);
		}
	}
}

@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage($size / $columns);
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage($size / $columns);
}

@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing

	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint, $breakpoints: $grid-breakpoints) {
			$get-value: map-get($grid-gutter-widths, $breakpoint);
			padding-right: ($get-value / 2);
			padding-left: ($get-value / 2);
			padding-top: $get-value;
		}
	}
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: $size / $columns;
	margin-left: if($num == 0, 0, percentage($num));
}

// GRID FRAMEWORK
// ----------------------------------------------------------------------------
@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {

	@each $breakpoint in map-keys($breakpoints) {

		@include media-breakpoint-up($breakpoint) {

			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col-#{$breakpoint} {
				flex-basis: 0;
				flex-grow: 1;
				max-width: 100%;
			}

			.col-#{$breakpoint}-auto {
				flex: 0 0 auto;
				width: auto;
				max-width: none; // Reset earlier grid tiers
			}

			@for $i from 1 through $columns {

				.col-#{$breakpoint}-#{$i} {
					@include make-col($i, $columns);
				}
			}

			.order-#{$breakpoint}-first {
				order: -1;
			}

			@for $i from 1 through $columns {

				.order-#{$breakpoint}-#{$i} {
					order: $i;
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not ($breakpoint == '' and $i == 0) { // Avoid emitting useless .offset-0
					.offset-#{$breakpoint}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}
